{"version":3,"sources":["screens/HomeScreen.js","screens/RepetitionExerciseScreen.js","screens/DurationExerciseScreen.js","screens/WeightRepetitionScreen.js","App.js"],"names":["HomeScreen","navigation","exerciseList","route","useContext","ExerciseContext","gotoExercise","useCallback","key","type","navigate","exerciseKey","count","View","style","styles","container","FlatList","data","renderItem","item","Button","onPress","title","name","StatusBar","RepetitionExerciseScreen","params","useState","setCount","currentExercise","find","ex","suggestedExercise","suggestedNextExercise","repStyles","reps","buttonStyle","backgroundColor","borderWidth","borderColor","borderRadius","containerStyle","width","marginHorizontal","marginVertical","titleStyle","fontWeight","ct","StyleSheet","create","button","height","repsTitle","fontSize","DurationExerciseScreen","Date","startTime","setStartTime","timerStarted","setTimerStarted","setFrame","useEffect","intervalId","setInterval","frame","clearInterval","elapsedTime","valueOf","String","getMinutes","padStart","getSeconds","getMilliseconds","React","createContext","Stack","createNativeStackNavigator","App","Provider","value","NavigationContainer","Navigator","Screen","component","options","WeightRepetitionScreen","flex","alignItems","justifyContent"],"mappings":"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","file":"static/js/app.41ae107b.chunk.js","sourcesContent":["import { StatusBar } from \"expo-status-bar\"\r\nimport { useCallback, useContext } from \"react\"\r\nimport { Button, FlatList, View } from \"react-native\"\r\nimport { ExerciseContext, styles } from \"../App\"\r\n\r\nexport default function HomeScreen ({navigation, route}){\r\n  let exerciseList = useContext(ExerciseContext)\r\n  //let exerciseList = route.params.exerciseList\r\n  let gotoExercise = useCallback(({key, type})=> {\r\n    navigation.navigate(type, {exerciseKey: key, count: 0, exerciseList: exerciseList})\r\n  })\r\n  return(\r\n    <View style={styles.container}>\r\n      <FlatList data = {exerciseList} renderItem={({item}) =>\r\n      <Button onPress ={() => gotoExercise(item)} title = {item.name}></Button>\r\n      }/>\r\n      <StatusBar style=\"auto\" />\r\n    </View>\r\n  )\r\n}","import { StatusBar } from \"expo-status-bar\"\r\nimport { useCallback, useContext, useState } from \"react\"\r\nimport {FlatList, StyleSheet, View } from \"react-native\"\r\nimport { Button, Text} from \"react-native-elements\"\r\nimport { ExerciseContext, REPETITION_EXERCISE, styles } from \"../App\"\r\n\r\nexport default function RepetitionExerciseScreen({route, navigation}){\r\n  let {exerciseKey} = route.params\r\n  let [count, setCount] = useState(0)\r\n  let exerciseList = useContext(ExerciseContext)\r\n  let currentExercise = exerciseList.find(ex => ex.key === exerciseKey)\r\n  let suggestedExercise = exerciseList.find(ex => ex.key == currentExercise.suggestedNextExercise)\r\n  return(\r\n    <View style={styles.container}>\r\n      <Text style = {repStyles.reps}>{count}</Text>\r\n      <Button \r\n      buttonStyle={{\r\n                backgroundColor: 'black',\r\n                borderWidth: 2,\r\n                borderColor: 'white',\r\n                borderRadius: 30,\r\n              }}\r\n              containerStyle={{\r\n                width: 200,\r\n                marginHorizontal: 50,\r\n                marginVertical: 10,\r\n              }}\r\n              titleStyle={{ fontWeight: 'bold' }}\r\n      onPress ={() => setCount(ct => ct+1)} title = \"+\"></Button>\r\n      <Button onPress ={() => setCount(0)} title = \"Reset\"></Button>\r\n      <Button onPress ={() => navigation.navigate(suggestedExercise.type,\r\n      {exerciseKey: currentExercise.suggestedNextExercise, exerciseList})} \r\n      title = {`Suggested Next Exercise: ${suggestedExercise.name}`}></Button>\r\n      <Button onPress ={() => navigation.navigate(\"Home\")} title = \"Return Home\"></Button>\r\n      <StatusBar style=\"auto\" />\r\n    </View>\r\n  )\r\n}\r\n\r\nlet repStyles = StyleSheet.create({\r\n    button:{\r\n        height: 50\r\n    },\r\n    repsTitle: {\r\n        fontSize: 35\r\n    },\r\n    reps: {\r\n        fontSize: 45\r\n    }\r\n})","import { StatusBar } from \"expo-status-bar\"\r\nimport { useCallback, useContext, useEffect, useState } from \"react\"\r\nimport {FlatList, StyleSheet, View } from \"react-native\"\r\nimport { Button, Text} from \"react-native-elements\"\r\nimport { ExerciseContext, styles } from \"../App\"\r\n\r\nexport default function DurationExerciseScreen({route, navigation}){\r\n  let {exerciseKey} = route.params\r\n  let exerciseList = useContext(ExerciseContext)\r\n  let currentExercise = exerciseList.find(ex => ex.key === exerciseKey)\r\n  let suggestedExercise = exerciseList.find(ex => ex.key == currentExercise.suggestedNextExercise)\r\n    let [startTime, setStartTime] = useState(new Date(0))\r\n    let [timerStarted, setTimerStarted] = useState(false)\r\n    let [frame, setFrame] = useState(0)\r\n    useEffect (() => {\r\n    let intervalId = \r\n        setInterval(() => {\r\n            if (timerStarted){\r\n                setFrame(frame => frame + 1)\r\n                //console.log(\"Frame \" + frame)\r\n            }\r\n        }, \r\n        1000 / 30)\r\n     return () => clearInterval(intervalId)\r\n    })\r\n    let elapsedTime = startTime\r\n    if (timerStarted){\r\n        elapsedTime = new Date(new Date().valueOf() - startTime.valueOf())\r\n    } \r\n  return(\r\n    <View style={styles.container}>\r\n    <Text>Timer: {String(elapsedTime.getMinutes()).padStart(2, \"0\", 2)}: {String(elapsedTime.getSeconds()).padStart(2, \"0\")}.{String (elapsedTime.getMilliseconds()).padStart(3,\"0\")}</Text>\r\n    {!timerStarted ? <Button onPress = {() => {setTimerStarted(true); setStartTime(new Date()) }}title = \"Start\"></Button>\r\n    : <Button onPress = {() => {setStartTime (new Date (0)); setTimerStarted(false); }} title = \"Reset\"></Button>\r\n    }\r\n      <Button style = {repStyles.button} onPress ={() => navigation.navigate(suggestedExercise.type,\r\n      {exerciseKey: currentExercise.suggestedNextExercise, exerciseList})} \r\n      title = {`Suggested Next Exercise: ${suggestedExercise.name}`}></Button>\r\n      <Button onPress ={() => navigation.navigate(\"Home\")} title = \"Return Home\"></Button>\r\n      <StatusBar style=\"auto\" />\r\n    </View>\r\n  )\r\n}\r\n\r\nlet repStyles = StyleSheet.create({\r\n    button:{\r\n        height: 50\r\n    },\r\n    repsTitle: {\r\n        fontSize: 35\r\n    },\r\n    reps: {\r\n        fontSize: 45\r\n    }\r\n})","import { StatusBar } from \"expo-status-bar\"\r\nimport { useCallback, useContext, useState } from \"react\"\r\nimport {FlatList, StyleSheet, View } from \"react-native\"\r\nimport { Button, Text} from \"react-native-elements\"\r\nimport { ExerciseContext, WEIGHT_REPETITION, styles } from \"../App\"\r\n\r\nexport default function RepetitionExerciseScreen({route, navigation}){\r\n  let {exerciseKey} = route.params\r\n  let [count, setCount] = useState(0)\r\n  let exerciseList = useContext(ExerciseContext)\r\n  let currentExercise = exerciseList.find(ex => ex.key === exerciseKey)\r\n  let suggestedExercise = exerciseList.find(ex => ex.key == currentExercise.suggestedNextExercise)\r\n  return(\r\n    <View style={styles.container}>\r\n      <Text style = {repStyles.reps}>{count}</Text>\r\n      <Button \r\n      buttonStyle={{\r\n                backgroundColor: 'black',\r\n                borderWidth: 2,\r\n                borderColor: 'white',\r\n                borderRadius: 30,\r\n              }}\r\n              containerStyle={{\r\n                width: 200,\r\n                marginHorizontal: 50,\r\n                marginVertical: 10,\r\n              }}\r\n              titleStyle={{ fontWeight: 'bold' }}\r\n      onPress ={() => setCount(ct => ct+1)} title = \"+\"></Button>\r\n      <Button onPress ={() => setCount(0)} title = \"Reset\"></Button>\r\n      <Button onPress ={() => navigation.navigate(suggestedExercise.type,\r\n      {exerciseKey: currentExercise.suggestedNextExercise, exerciseList})} \r\n      title = {`Suggested Next Exercise: ${suggestedExercise.name}`}></Button>\r\n      <Button onPress ={() => navigation.navigate(\"Home\")} title = \"Return Home\"></Button>\r\n      <StatusBar style=\"auto\" />\r\n    </View>\r\n  )\r\n}\r\n\r\nlet repStyles = StyleSheet.create({\r\n    button:{\r\n        height: 50\r\n    },\r\n    repsTitle: {\r\n        fontSize: 35\r\n    },\r\n    reps: {\r\n        fontSize: 45\r\n    }\r\n})","//For Portfolio 2, I've decided to go for Option 1.1\r\n//The goal of this option was to create additional or redesign current components\r\n//For this particular lab, I've decided to add another \"screen\" to this exercise app done in Lab 8\r\n//In which the primary goal of the \"WeightRepetitionScreen\" is primary counting how many reps\r\n//an individual does when lifting weights/doing exercises with weights. \r\n\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport { useCallback, useContext } from 'react';\r\nimport { Button, FlatList, StyleSheet, Text, View } from 'react-native';\r\nimport React from 'react';\r\nimport HomeScreen from './screens/HomeScreen'\r\nimport RepetitionExerciseScreen from './screens/RepetitionExerciseScreen';\r\nimport DurationExerciseScreen from './screens/DurationExerciseScreen';\r\nimport WeightRepetitionScreen from './screens/WeightRepetitionScreen';\r\n\r\nexport const DURATION_EXERCISE = \"DurationExerciseScreen\"\r\nexport const REPETITION_EXERCISE = \"RepetitionExerciseScreen\"\r\nexport const WEIGHT_REPETITION = \"WeightRepetitionScreen\"\r\n\r\nlet exerciseList = [\r\n    {\r\n    name: \"Push-Ups\",\r\n    key: \"1\",\r\n    type: REPETITION_EXERCISE,\r\n    suggestedNextExercise: \"2\"\r\n  },\r\n  {\r\n    name: \"Sit-Ups\",\r\n    key: \"2\",\r\n    type: REPETITION_EXERCISE,\r\n    suggestedNextExercise: \"3\"\r\n  },\r\n  {\r\n    name: \"Running\",\r\n    key: \"3\",\r\n    type: DURATION_EXERCISE,\r\n    suggestedNextExercise: \"4\"\r\n  },\r\n  {\r\n    name: \"Dumbbells\",\r\n    key: \"4\",\r\n    type: WEIGHT_REPETITION,\r\n    suggestedNextExercise: \"5\"\r\n  },\r\n  {\r\n    name: \"Deadlifts\",\r\n    key: \"5\",\r\n    type: WEIGHT_REPETITION,\r\n    suggestedNextExercise: \"1\"\r\n  }\r\n]\r\n\r\nexport const ExerciseContext = React.createContext(exerciseList)\r\n\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\nexport default function App() {\r\n\r\n  return (\r\n    <ExerciseContext.Provider value={exerciseList}>\r\n    <NavigationContainer>\r\n      <Stack.Navigator>\r\n        <Stack.Screen name=\"Home\" component={HomeScreen}/>\r\n        <Stack.Screen options ={(({route}) => ({\r\n          title: \"Repetition: \" + \r\n        route.params.exerciseList.find(ex => ex.key === route.params.exerciseKey).name\r\n      }))} \r\n      name= {REPETITION_EXERCISE} component={RepetitionExerciseScreen}/>\r\n        <Stack.Screen \r\n        options ={(({route}) => ({\r\n          title: \"Duration: \" + \r\n        route.params.exerciseList.find(ex => ex.key === route.params.exerciseKey).name\r\n      }))} \r\n        name= {DURATION_EXERCISE} component={DurationExerciseScreen}/>\r\n        <Stack.Screen \r\n        options ={(({route}) => ({\r\n          title: \"Weight Repetition: \" + \r\n        route.params.exerciseList.find(ex => ex.key === route.params.exerciseKey).name\r\n      }))} \r\n        name= {WEIGHT_REPETITION} component={WeightRepetitionScreen}/>\r\n      </Stack.Navigator>\r\n    </NavigationContainer>\r\n    </ExerciseContext.Provider>\r\n  );\r\n}\r\n\r\nexport const styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n});"],"sourceRoot":""}